Server = "159.65.19.184",
Database = "dwbi",
UID = "sa",
PWD = "sqlServerMist3rEbad1!",
Port = 1433)
on.exit(dbDisconnect(con))
print(con)
# Lets test run few SQL Server commands
# dbListTables(con)
data <- dbReadTable(con, "dimDesc")
print(dbListTables(con))
install.packages("odbc")
strTest <- ""
is.na(strTest)
strTest = is.na(strTest) <- "hello"
strTest
install.packages("magrittr") # only needed the first time you use it
install.packages("dplyr")    # alternative installation of the %>%
install.packages("data.table")
install.packages("Amelia")
######################  Loading and basic cleaning  ######################
titanicData <- read.csv("titanic.csv", header=T, na.strings=c(""), stringsAsFactors = T)
head(titanicData)
install.packages("magrittr") # only needed the first time you use it
install.packages("dplyr")    # alternative installation of the %>%
install.packages("data.table")
install.packages("Amelia")
######################  Loading and basic cleaning  ######################
titanicData <- read.csv("titanic.csv", header=T, na.strings=c(""), stringsAsFactors = T)
head(titanicData)
titanicData <- read.csv("titanic.csv", header=T, na.strings=c(""), stringsAsFactors = T)
head(titanicData)
install.packages("magrittr") # only needed the first time you use it
install.packages("dplyr")    # alternative installation of the %>%
install.packages("data.table")
install.packages("Amelia")
titanicData <- read.csv("titanic.csv", header=T, na.strings=c(""), stringsAsFactors = T)
titanicData <- read.csv("titanic.csv", header=T, na.strings=c(""), stringsAsFactors = T)
install.packages("magrittr") # only needed the first time you use it
install.packages("dplyr")    # alternative installation of the %>%
install.packages("data.table")
install.packages("Amelia")
titanicData <- read.csv("titanic.csv", header=T, na.strings=c(""), stringsAsFactors = T)
install.packages("magrittr") # only needed the first time you use it
install.packages("dplyr")    # alternative installation of the %>%
install.packages("data.table")
install.packages("Amelia")
install.packages("magrittr") # only needed the first time you use it
install.packages("dplyr")    # alternative installation of the %>%
install.packages("data.table")
install.packages("Amelia")
titanicData <- read.csv("titanic.csv", header=T, na.strings=c(""), stringsAsFactors = T)
titanicData <- read.csv("titanic.csv", header=T, na.strings=c(""), stringsAsFactors = T)
pwd
getwd()
setwd("/Users/ebadstaypal/Documents/NCI/Seconds Semester/ADM/ca_practice");
getwd()
titanicData <- read.csv("titanic.csv", header=T, na.strings=c(""), stringsAsFactors = T)
head(titanicData)
library(Amelia)
#Visual representation of missing data
missmap(titanicData, main = "Missing values vs observed")
head(titanicData)
library(mice)
integerColumnsTitanic <- colnames(titanicData[, sapply(titanicData, class) != "numeric"])
head(integerColumnsTitanic)
mice_mod <- mice(titanicData[, !names(titanicData) %in%
integerColumnsTitanic], method='rf')
head(titanicData)
mice_mod <- mice(titanicData[, !names(titanicData) %in%
integerColumnsTitanic], method='rf')
mice_output <- complete(mice_mod)
head(titanicData)
titanicData$Age <- mice_output$Age
titanicData$Fare <- mice_output$Fare
missmap(titanicData, main = "Missing values vs observed")
head(titanicData)
count(titanicData$Embarked, c(NULL))
count(titanicData$Embarked, NULL)
count(titanicData$Embarked[is.nan(titanicData$Embarked) ])
count
> library(plyr)
library(plyr)
count(titanicData$Embarked[is.nan(titanicData$Embarked) ])
count(titanicData$Embarked[!is.nan(titanicData$Embarked)])
count(titanicData$Embarked[!is.nan(titanicData$Cabin)])
count(titanicData$Cabin[is.nan(titanicData$Cabin)])
count(titanicData$Cabin[is.nan(titanicData$Cabin)])
count(is.nan(titanicData$Cabin))
count(is.nan(!titanicData$Cabin))
count(!is.nan(titanicData$Cabin))
count(is.nan(titanicData$Cabin))
count((titanicData$Cabin))
count((titanicData$Cabin))
index <- sample(1:nrow(irisData), nrow(irisData) * .70, replace=FALSE)
count((titanicData$Cabin))
count((titanicData$Cabin))
count(is.nan(titanicData$Fare))
count(is.nan(titanicData$Cabin))
count(titanicData,"Cabin")
set.seed(666)
index <- sample(1:nrow(titanicData), nrow(titanicData) * .70, replace=FALSE)
training <- titanicData[index, ]
test <- titanicData[-index, ]
library("class")
library("caret")
KnnTestPrediction <- list()
accuracy <- numeric()
for(k in 1:100)
{
KnnTestPrediction[[k]] <- knn(training[,-5], test[,-5], training$Survived, k, prob=TRUE)
accuracy[k] <- sum(KnnTestPrediction[[k]]==test$Survived)/length(test$Survived)*100
}
nTestPrediction <- list()
accuracy <- numeric()
is.na(titanicData$Cabin)
source('~/Documents/NCI/Seconds Semester/ADM/ca_practice/knn.R')
install.packages("dplyr")
count(is.na(titanicData$Cabin))
count(is.na(titanicData$Cabin))
count(is.na(titanicData$Fare))
count(is.na(titanicData$Cabin))
tot <- count(is.na(titanicData$Cabin))
tot
tot$freq
tot$freq[1]
tot$freq[1] * 100 / (tot$freq[1]+tot$freq[2])
tot$freq[1]+tot$freq[2
tot$freq[1]+tot$freq[2]
tot <- count(is.na(titanicData$Cabin))
tot$freq[1]+tot$freq[2]
tot$freq[1]
tot$freq[1] * 100 / (tot$freq[1]+tot$freq[2])
titanicData$Cabin <- NaN
head(titanicData)
titanicData$Cabin <- NULL
head(titanicData)
library("class")
library("caret")
KnnTestPrediction <- list()
accuracy <- numeric()
for(k in 1:100)
{
KnnTestPrediction[[k]] <- knn(training[,-5], test[,-5], training$Survived, k, prob=TRUE)
accuracy[k] <- sum(KnnTestPrediction[[k]]==test$Survived)/length(test$Survived)*100
}
is.na(titanicData)
set.seed(666)
index <- sample(1:nrow(titanicData), nrow(titanicData) * .70, replace=FALSE)
training <- titanicData[index, ]
test <- titanicData[-index, ]
KnnTestPrediction <- list()
accuracy <- numeric()
for(k in 1:100)
{
KnnTestPrediction[[k]] <- knn(training[,-5], test[,-5], training$Survived, k, prob=TRUE)
accuracy[k] <- sum(KnnTestPrediction[[k]]==test$Survived)/length(test$Survived)*100
}
KnnTestPrediction[[k]] <- knn(training, test, training$Survived, k, prob=TRUE)
for(k in 1:100)
{
KnnTestPrediction[[k]] <- knn(training, test, training$Survived, k, prob=TRUE)
accuracy[k] <- sum(KnnTestPrediction[[k]]==test$Survived)/length(test$Survived)*100
}
index <- sample(1:nrow(titanicData), nrow(titanicData) * .70, replace=FALSE)
training <- titanicData[index, ]
test <- titanicData[-index, ]
head(training)
index <- sample(1:nrow(titanicData), nrow(titanicData) * .70, replace=FALSE)
training <- titanicData[index, ]
test <- titanicData[-index, ]
# Evaluate the change in accuracy with increasing values of k
KnnTestPrediction <- list()
accuracy <- numeric()
for(k in 1:100)
{
KnnTestPrediction[[k]] <- knn(training[,-1], test[,-1], training$Survived, k, prob=TRUE)
accuracy[k] <- sum(KnnTestPrediction[[k]]==test$Survived)/length(test$Survived)*100
}
sum(is.na(titanicData))
sum(is.na(titanicData))
titanicData[is.na(titanicData)]
titanicData[is.na(titanicData)] <- NULL
na.omit(titanicData)
head(titanicData)
titanicData <- na.omit(titanicData)
sum(is.na(titanicData))
library("class")
library("caret")
set.seed(666)
index <- sample(1:nrow(titanicData), nrow(titanicData) * .70, replace=FALSE)
training <- titanicData[index, ]
test <- titanicData[-index, ]
KnnTestPrediction <- list()
accuracy <- numeric()
for(k in 1:100)
{
KnnTestPrediction[[k]] <- knn(training[,-1], test[,-1], training$Survived, k, prob=TRUE)
accuracy[k] <- sum(KnnTestPrediction[[k]]==test$Survived)/length(test$Survived)*100
}
KnnTestPrediction[[k]] <- knn(training[,-1], test[,-1], training$Survived, k, prob=TRUE)
titanicData$Survived <- factor(titanicData$Survived, levels = c(0,1), labels = c("No", "Yes"))
titanicData$Pclass <- as.factor(titanicData$Pclass)
head(titanicData)
unique(titanicData$Name)
titanicData <- read.csv("titanic.csv", header = T, na.strings = c(""), stringsAsFactors = T)
titanicData$Survived <- factor(titanicData$Survived, levels = c(0,1), labels = c("No", "Yes"))
titanicData$Pclass <- as.factor(titanicData$Pclass)
titanicData <- read.csv("titanic.csv", header = T, na.strings = c(""), stringsAsFactors = T)
head(titanicData)
summary(titanicData)
summary(titanicData$Survived)
unique(titanicData$Survived)
titanicData$Survived <- factor(titanicData$Survived, levels = c(0,1), labels = c("No", "Yes"))
unique(titanicData$Pclass)
titanicData$Pclass <- as.factor(titanicData$Pclass)
unique(titanicData$Pclass)
unique(titanicData$Pclass)
titanicData <- titanicData[, -c(1,11)]
titanicData
heda(titanicData)
head(titanicData)
titanicData <- read.csv("titanic.csv", header = T, na.strings = c(""), stringsAsFactors = T)
unique(titanicData$Survived)
titanicData$Survived <- factor(titanicData$Survived, levels = c(0,1), labels = c("No", "Yes"))
titanicData$Pclass <- as.factor(titanicData$Pclass)
unique(titanicData$Pclass)
head(titanicData)
1
head(titanicData)
unique(titanicData$Embarked)
titanicData$Embarked[-titanicData$Embarked]
titanicData$Embarked[!titanicData$Embarked]
titanicData$Embarked[is.na(titanicData$Embarked)]
is.na(titanicData$Embarked)
match(is.na(),x)
match(is.na(titanicData$Embarked),titanicData$Embarked)
sapply(titanicData, function(x) sum(is.na(x)))
which(is.na(titanicData$Embarked))
which(is.na(titanicData))
which(is.na(titanicData))
which(is.na(titanicData))
which(is.na(titanicData$Embarked))
plot(titanicData$Embarked)
plot(titanicData$Embarked, cex = .5, col = "dark red")
plot(titanicData$Embarked, cex = .5, col = "dark red")
which(is.na(titanicData$Embarked))
titanicData$Embarked[c(62, 830)] <- 'C'
mes(titanicData) %in%
c('PassengerId','Name','Ticket','Cabin','Survived')], method='rf')
mice_output <- complete(mice_mod)
titanicData$Age <- mice_output$Age
titanicData$Age <- mice_output$Age
mice_output <- complete(mice_mod)
titanicData$Age <- mice_output$Age
titanicData[3] <- NULL
titanicData[7] <- NULL
titanicData[11] <- NULL
unique(titanicData$Fsize)
unique(titanicData$Fsize)
(titanicData$Fsize)
set.seed(1337)
index <- sample(1:nrow(titanicData), nrow(titanicData) * .80, replace=FALSE)
training <- titanicData[index, ]
testing <- titanicData[-index, ]
logit <- glm(Survived~., family = binomial(link = "logit"), data = training)
summary(logit)
logit.prediction <- predict(logit, newdata = testing, type = "response")
logit <- glm(Survived~., family = binomial(link = "logit"), data = training)
summary(logit)
logit.prediction <- predict(logit, newdata = testing, type = "response")
titanicData[1] <- NULL
(titanicData$Fsize)
# Logistic Regression
set.seed(1337)
index <- sample(1:nrow(titanicData), nrow(titanicData) * .80, replace=FALSE)
training <- titanicData[index, ]
testing <- titanicData[-index, ]
logit <- glm(Survived~., family = binomial(link = "logit"), data = training)
summary(logit)
logit.prediction <- predict(logit, newdata = testing, type = "response")
titanicData <- read.csv("titanic.csv", header = T, na.strings = c(""), stringsAsFactors = T)
unique(titanicData$Survived)
titanicData$Survived <- factor(titanicData$Survived, levels = c(0,1), labels = c("No", "Yes"))
titanicData$Pclass <- as.factor(titanicData$Pclass)
unique(titanicData$Pclass)
head(titanicData)
titanicData <- titanicData[, -c(1,11)]
head(titanicData)
sapply(titanicData, function(x) sum(is.na(x)))
which(is.na(titanicData$Embarked))
titanicData$Embarked[c(62, 830)] <- 'C'
#use a random forest to impute missing age values
mice_mod <- mice(titanicData[, !names(titanicData) %in%
c('PassengerId','Name','Ticket','Cabin','Survived')], method='rf')
mice_output <- complete(mice_mod)
titanicData$Age <- mice_output$Age
titanicData[3] <- NULL
titanicData[7] <- NULL
titanicData[11] <- NULL
head(titanicData)
# Logistic Regression
set.seed(1337)
# titanicData[1] <- NULL
summary(titanicData)
index <- sample(1:nrow(titanicData), nrow(titanicData) * .80, replace=FALSE)
training <- titanicData[index, ]
testing <- titanicData[-index, ]
logit <- glm(Survived~., family = binomial(link = "logit"), data = training)
summary(logit)
logit.prediction <- predict(logit, newdata = testing, type = "response")
results.logit
results.logit <- ifelse(logit.prediction > 0.5,"Yes","No")
results.logit
# table confusion matrix
table(testing$Survived, logit.prediction > 0.5)
# table confusion matrix
table(testing$Survived, logit.prediction > 0.5)
# ROC and AUC for logistic prediction
library(ROCR)
# ROC and AUC for logistic prediction
library(ROCR)
ROCRpred <- prediction(logit.prediction, testing$Survived)
ROCRperf <- performance(ROCRpred, 'tpr','fpr')
plot(ROCRperf, colorize = TRUE, text.adj = c(-0.2,1.7))
plot(ROCRperf, colorize = TRUE, text.adj = c(-0.2,1.7))
auc <- performance(ROCRpred, measure = "auc")
auc <- auc@y.values[[1]]
auc
set.seed(1337)
index <- sample(1:nrow(titanicData), nrow(titanicData) * .80, replace=FALSE)
training <- titanicData[index, ]
testing <- titanicData[-index, ]
# Run kNN
library("class")
library("caret")
head(train())
head(training)
size(index)
length(index)
(index)
length(index)
length(-index)
length(-index)
(-index)
head(training)
KnnTestPrediction[[k]] <- knn(training, test, training$Survived, k, prob=TRUE)
nTestPrediction <- list()
ac
KnnTestPrediction <- list()
accuracy <- numeric()
KnnTestPrediction <- list()
accuracy <- numeric()
for(k in 1:100)
{
KnnTestPrediction[[k]] <- knn(training, test, training$Survived, k, prob=TRUE)
accuracy[k] <- sum(KnnTestPrediction[[k]]==testing$Survived)/length(testing$Survived)*100
}
{
KnnTestPrediction[[k]] <- knn(training, testing, training$Survived, k, prob=TRUE)
accuracy[k] <- sum(KnnTestPrediction[[k]]==testing$Survived)/length(testing$Survived)*100
}
################## KNN ##################
sapply(titanicData, function(x) sum(is.na(x)))
################## KNN ##################
sapply(titanicData, function(x) sum(is.na(x)))
set.seed(1337)
index <- sample(1:nrow(titanicData), nrow(titanicData) * .80, replace=FALSE)
training <- titanicData[index, ]
testing <- titanicData[-index, ]
# Run kNN
library("class")
library("caret")
head(training)
summary(training)
is.na(training)
sum(is.na(training))
sum(is.na(testing))
KnnTestPrediction <- list()
accuracy <- numeric()
for(k in 1:100)
{
KnnTestPrediction[[k]] <- knn(training, testing, training$Survived, k, prob=TRUE)
accuracy[k] <- sum(KnnTestPrediction[[k]]==testing$Survived)/length(testing$Survived)*100
}
titanicData$Survived <- factor(titanicData$Survived, levels = c(0,1), labels = c("No", "Yes"))
titanicData$Pclass <- as.factor(titanicData$Pclass)
set.seed(1337)
index <- sample(1:nrow(titanicData), nrow(titanicData) * .80, replace=FALSE)
training <- titanicData[index, ]
testing <- titanicData[-index, ]
# Run kNN
library("class")
library("caret")
head(training)
sum(is.na(testing))
sum(is.na(testing))
head(training)
################## KNN ##################
sapply(titanicData, function(x) sum(is.na(x)))
titanicData$Survived <- factor(titanicData$Survived, levels = c(0,1), labels = c("No", "Yes"))
titanicData$Pclass <- as.factor(titanicData$Pclass)
index <- sample(1:nrow(titanicData), nrow(titanicData) * .80, replace=FALSE)
training <- titanicData[index, ]
testing <- titanicData[-index, ]
# Run kNN
library("class")
library("caret")
head(training)
titanicData <- read.csv("titanic.csv", header = T, na.strings = c(""), stringsAsFactors = T)
unique(titanicData$Survived)
titanicData$Survived <- factor(titanicData$Survived, levels = c(0,1), labels = c("No", "Yes"))
titanicData$Pclass <- as.factor(titanicData$Pclass)
unique(titanicData$Pclass)
head(titanicData)
titanicData <- titanicData[, -c(1,11)]
head(titanicData)
sapply(titanicData, function(x) sum(is.na(x)))
which(is.na(titanicData$Embarked))
titanicData$Embarked[c(62, 830)] <- 'C'
#use a random forest to impute missing age values
mice_mod <- mice(titanicData[, !names(titanicData) %in%
c('PassengerId','Name','Ticket','Cabin','Survived')], method='rf')
mice_output <- complete(mice_mod)
titanicData$Age <- mice_output$Age
titanicData[3] <- NULL
titanicData[7] <- NULL
titanicData[11] <- NULL
head(titanicData)
# titanicData[1] <- NULL
summary(titanicData)
(titanicData$Fsize)
# Logistic Regression
set.seed(1337)
index <- sample(1:nrow(titanicData), nrow(titanicData) * .80, replace=FALSE)
training <- titanicData[index, ]
testing <- titanicData[-index, ]
logit <- glm(Survived~., family = binomial(link = "logit"), data = training)
summary(logit)
logit.prediction <- predict(logit, newdata = testing, type = "response")
results.logit <- ifelse(logit.prediction > 0.5,"Yes","No")
results.logit
# table confusion matrix
table(testing$Survived, logit.prediction > 0.5)
# ROC and AUC for logistic prediction
library(ROCR)
ROCRpred <- prediction(logit.prediction, testing$Survived)
ROCRperf <- performance(ROCRpred, 'tpr','fpr')
plot(ROCRperf, colorize = TRUE, text.adj = c(-0.2,1.7))
auc <- performance(ROCRpred, measure = "auc")
auc <- auc@y.values[[1]]
auc
set.seed(1337)
index <- sample(1:nrow(titanicData), nrow(titanicData) * .80, replace=FALSE)
training <- titanicData[index, ]
testing <- titanicData[-index, ]
# Run kNN
library("class")
library("caret")
head(training)
sum(is.na(testing))
# Evaluate the change in accuracy with increasing values of k
KnnTestPrediction <- list()
accuracy <- numeric()
for(k in 1:100)
{
KnnTestPrediction[[k]] <- knn(training, testing, training$Survived, k, prob=TRUE)
accuracy[k] <- sum(KnnTestPrediction[[k]]==testing$Survived)/length(testing$Survived)*100
}
################## KNN ##################
sapply(titanicData, function(x) sum(is.na(x)))
titanicData <- titanicData[-8]
set.seed(1337)
index <- sample(1:nrow(titanicData), nrow(titanicData) * .80, replace=FALSE)
training <- titanicData[index, ]
testing <- titanicData[-index, ]
# Run kNN
library("class")
library("caret")
head(training)
sum(is.na(testing))
# Evaluate the change in accuracy with increasing values of k
KnnTestPrediction <- list()
accuracy <- numeric()
for(k in 1:100)
{
KnnTestPrediction[[k]] <- knn(training, testing, training$Survived, k, prob=TRUE)
accuracy[k] <- sum(KnnTestPrediction[[k]]==testing$Survived)/length(testing$Survived)*100
}
sum(is.na(testing))
accuracy <- numeric()
for(k in 1:100)
{
KnnTestPrediction[[k]] <- knn(training, testing, training$Survived, k, prob=TRUE)
accuracy[k] <- sum(KnnTestPrediction[[k]]==testing$Survived)/length(testing$Survived)*100
}
for(k in 1:100)
{
KnnTestPrediction[[k]] <- knn(training, testing, training$Survived[-4], k, prob=TRUE)
accuracy[k] <- sum(KnnTestPrediction[[k]]==testing$Survived)/length(testing$Survived)*100
for(k in 1:100)
{
KnnTestPrediction[[k]] <- knn(training, testing, training$Survived[-4], k, prob=TRUE)
accuracy[k] <- sum(KnnTestPrediction[[k]]==testing$Survived)/length(testing$Survived)*100
}
accuracy
;
''
exit
exit
exit
exit
